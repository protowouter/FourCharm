#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrreprt
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "FourCharm: A client-server Connect4 game"
\pdf_author "Luce Sandfort, Wouter Timmermans"
\pdf_subject "Maintenance document for FourCharm"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle plain
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
FourCharm: A client-server Connect4 Game
\end_layout

\begin_layout Author
Luce Sandfort 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Wouter Timmermans
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Overall Design
\end_layout

\begin_layout Standard
Early on in the design of our system we recognized that the protocol that
 would handle the communication between the client and server could be extracted
 from the game system.
 This protocol implementation is available at Github.com 
\begin_inset CommandInset citation
LatexCommand cite
key "c4-protocol"

\end_inset

.
 
\end_layout

\begin_layout Section
Class Diagrams
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename classDiagramTotalPackage.png
	height 60pheight%
	rotateAngle 270
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Global-overview-of"

\end_inset

Global overview of FourCharm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Global overview
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Global-overview-of"

\end_inset

 gives an overview of the global design of the system.
 
\end_layout

\begin_layout Paragraph
Model
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Model-package"

\end_inset

 is a detailed class diagram of the Game model component of our system.
 The main entry point to the Game model is the Game class.
 The game class uses a Board and two Players to achieve te responsibilities.
 The Board is responsible to maintain a valid Board state and the Game makes
 sure that only the current player can make a move.
 We have developed two Board implementations: ReferenceBoard and BinaryBoard.
 The binary board implementation is explained in more detail at 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:BinaryBoard"

\end_inset

.
 The ReferenceBoard class is an implementation of the Board that is a little
 bit more orthodox.
 ReferenceBoard is mainly used for performance comparison to the BinaryBoard.
 Both boards conform to the same specification and are 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset


\begin_inset Quotes erd
\end_inset


\begin_inset Quotes erd
\end_inset


\begin_inset Quotes erd
\end_inset


\begin_inset Quotes erd
\end_inset

 to the same test regimen.
 The Player interface is implemented by two Classes, ASyncPlayer and LocalAIPlay
er.
 A LocalAIPlayer uses a GameStrategy to determine the best move.
 The ASyncPlayer class is meant for Players which receive input in a Asynchronou
s way: this could be a player connected via a server or a human player connected
 to the local machine.
 There is also the LocalHumanPlayer class which extends ASyncPlayer and
 provides no further functionality, this is chiefly done to simplify checking
 if the current player is a human connected to the local machine.
 No distinction is made between AI an human players connected via a server.
 The GameStrategy collection of classes is also used to provide hint functionali
ty to a locally connected user.
 
\end_layout

\begin_layout Paragraph
View
\end_layout

\begin_layout Standard
Our system has two implementations of the FourCharmView interface.
 The main responsibility of controlling user input lies at the controller,
 but the Views are responsible for displaying changes in the game state.
 This reduces the unnecessary passing around of the board between the controller
 and the view.
 The two implementations of the FourCharmView interface are the FourCharmGUI
 (a graphical user interface) and the FourCharmTUI (a textual user interface).
\end_layout

\begin_layout Paragraph
Controller
\end_layout

\begin_layout Paragraph
Presenter
\end_layout

\begin_layout Paragraph
Server
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Server-package"

\end_inset

 is a detailed class diagram of the server component of our system.
 From a birds eye perspective, the server consists of three parts: 
\end_layout

\begin_layout Enumerate
FourCharmServer: this is the main server class that listens for incoming
 connections and creates new ClientHandlers for every incoming connection.
 This class also keeps track of all running games.
\end_layout

\begin_layout Enumerate
ClientGroup: models a collection of clients, this class is extended by PrelobbyG
roup, LobbyGroup and GameGroup.
\end_layout

\begin_layout Enumerate
ClientHandler: holds the connection to a client.
 ClientHandler uses C4 Protocol to parse incoming commands from the server
 and relays these messages to the ClientGroup this ClientHandler currently
 resides.
\end_layout

\begin_layout Standard
Because there are multiple commands in the protocol that have different
 meanings, depending on the state of the client, we decided that a Client
 is always in a ClientGroup.
 All of the different ClientGroups have their own implementation of the
 commands.
 This way the protocol behavior is modeled on the server side.
\end_layout

\begin_layout Standard
Whenever a Client is connected to the server, he will start in the PreLobbyGroup.
 If the Client gives the command 'join' and he is accepted by the server,
 he will be deleted from the PreLobbyGroup.
 Then, the Client will be added to the LobbyGroup.
 In here, whenever two Clients give the command 'ready' a game will be started
 with these two Clients.
 This will be done by putting them into the GameGroup.
 When the game is finished, the Clients are send back to the LobbyGroup
 where they will stay until they either start a new game or exit the game
 of Connect Four.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename classDiagramModel.png
	width 75col%
	rotateAngle 270

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Model-package"

\end_inset

Model package
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename classDiagramView.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:View-package-class"

\end_inset

View package class diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename classDiagramControllerServerHandler.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Controller-and-ServerHandler"

\end_inset

Controller and ServerHandler
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename classDiagramPresenter.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Presenter-package"

\end_inset

Presenter package
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename classDiagramServer.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Server-package"

\end_inset

Server package
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Requirements overview
\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features rotate="0" tabularvalignment="middle" tabularwidth="100col%">
<column alignment="center" valignment="top" width="8col%">
<column alignment="center" valignment="top" width="40col%">
<column alignment="center" valignment="top" width="42col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requirement
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Implemented by class
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Server is started
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmServer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Server listens to entered port number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TODO
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error message if the port number is in use
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmServer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
New port number can be entered
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TODO
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A server can support multiple instances of the game that are played simultaneous
ly by different clients
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameGroup/FourCharmServer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All communication messages are written to System.out
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmTUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The server respects the written protocol and is able to communicate with
 all other clients from the tutorial group
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C4 Protocol
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
The requirements for the server
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top" width="8col%">
<column alignment="center" valignment="top" width="60col%">
<column alignment="center" valignment="top" width="32col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requirement
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Implemented by class
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User friendly TUI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmTUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TUI provides option to request a game at the server (enter port number and
 IP address)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmTUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Client supports human players and computer players (AI)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmController
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The maximum thinking time of the computer player should be a parameter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MTDfStrategy
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The client provides a 'hint' functionality.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TODO
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The 'hint' functionality is a possible move and may only be proposed to
 the human player
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TODO
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
After a game has finished, the player should be able to start a new game
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmTUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Other players should be informed if a player quits the game before it has
 finished, closes the UI or the client crashes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmTUI/TODO
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
After 8, the other player should be allowed to register again with the server
 to play the game
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmTUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If a server disconnects, the client should react to this in a decent way
 (closing all open connections, etc.)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServerHandler
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The client respects the written protocol and is able to communicate with
 all other clients from the tutorial group
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C4 Protocol
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
The requirements for the client
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Programming Patterns
\end_layout

\begin_layout Subsection
Observer
\end_layout

\begin_layout Standard
There is only one class in our application that is an Observable: Game.
 There are however multiple classes that are Observers.
\end_layout

\begin_layout Standard
The observer pattern is used in multiple places in our application.
 Both the view and the controller are observers of the Game.
 The view just renders the board on an update, the controller checks wether
 input from a human is required and enables the move input of the view when
 it is.
 GameGroup is also an Observer of Game, after every move when notifyObserver
 is called, the server notifies all clients in the Game of the current player.
 When the game has ended the server also informs all clients in the GameGroup
 of this.
\end_layout

\begin_layout Subsection
Model View Controller
\end_layout

\begin_layout Standard
We have a model, multiple views and a controller.
\end_layout

\begin_layout Chapter
Classes
\end_layout

\begin_layout Standard
In this chapter, every class in our system of the game Connect Four will
 be discussed.
 The discussion will be about the role of the class in the system, the responsib
ilities of the class and the other classes this class uses to fulfill its
 responsibilities.
 Furthermore, special cases in the classes contract and any precautions
 taken to fulfill the preconditions in the contract of the server classes
 will be discussed where necessary.
\end_layout

\begin_layout Standard
The classes are divided in packages by putting classes together that are
 doing a similar job.
 The sections in this chapter will represent the different packages.
\end_layout

\begin_layout Section
Client
\end_layout

\begin_layout Paragraph
ServerHandler
\end_layout

\begin_layout Standard
Handles the connection to the server from the perspective of the client.
 This class makes use of the Protocol classes, the Board Model classes and
 the strategy classes to achieve its responsibilities.
\end_layout

\begin_layout Section
Exception
\end_layout

\begin_layout Paragraph
InvalidMoveException
\end_layout

\begin_layout Standard
Exception that gets thrown when an invalid move is attempted to be made.
 This class extends the normal Exception class and is used by the Board
 class.
\end_layout

\begin_layout Paragraph
ServerConnectionException
\end_layout

\begin_layout Standard
Signals that a ServerConnectionException of some sort has occured.
 
\end_layout

\begin_layout Section
Model
\end_layout

\begin_layout Subsection
AI
\end_layout

\begin_layout Paragraph
MDTfStrategy
\end_layout

\begin_layout Standard
This MTDfStrategy class makes use of the interface GameStrategy.
 This is a specific strategy a computer player (LocalAIPlayer class) can
 use.
 So this class is responsible for giving the computer player brains.
 This way the computer player can think ahead and foresee certain moves.
 This class also uses the NegaMaxStrategy class to come up with new moves.
\end_layout

\begin_layout Paragraph
NegaMaxStrategy
\end_layout

\begin_layout Standard
The NegaMaxStrategy class implements the GameStrategy interface.
 This combination is used by the LocalAIPlayer class to make the computer
 player 'smart' and to make the computer player able to win games by foreseeing
 moves.
 The algorithm used by the NegaMaxStrategy class is the NegaMax algorithm.
 This implementation makes use of Alpha-Beta pruning and a transposition
 table to optimize performance.
\end_layout

\begin_layout Paragraph
RandomStrategy
\end_layout

\begin_layout Standard
The RandomStrategy class implements GameStrategy and is another way to make
 the computer player of the LocalAIPlayer class 'smarter'.
 Well, maybe not exactly smarter because the strategy is random, so it will
 take a lucky guess to win a game.
\end_layout

\begin_layout Subsection
Board
\end_layout

\begin_layout Paragraph
BinaryBoard
\end_layout

\begin_layout Standard
Class for modelling a board for the game connect four.
 The responsibility of this class is to keep the state of the board.
 For efficiency reasons the board state is implemented in an array of 2
 longs.
 This class makes use of the Board class to achieve its responsibilities.
\end_layout

\begin_layout Paragraph
ReferenceBoard
\end_layout

\begin_layout Standard
Class for modeling a board for the game connect four.
 This class's responsibility is to keep the state of the board.
 This is the reference implementation implemented using an 2D array.
 This class makes use of the Board class.
\end_layout

\begin_layout Subsection
Player
\end_layout

\begin_layout Paragraph
ASyncPlayer
\end_layout

\begin_layout Paragraph
LocalAIPlayer
\end_layout

\begin_layout Standard
Create an Artificial Intelligence (AI) player given a strategy.
 This class is responsible for making a (smart) computer player.
 The LocalAIPlayer class makes use of the GameStrategy Interface and the
 classes belonging to this interface (the MDTDfStrategy class, the NegaMaxStrate
gy class and the RandomStrategy class).
\end_layout

\begin_layout Paragraph
LocalHumanPlayer
\end_layout

\begin_layout Standard
LocalHumanPlayer extends AsyncPlayer and is used to distinguish AI and Human
 players.
 
\end_layout

\begin_layout Paragraph
Mark
\end_layout

\begin_layout Standard
The Mark enums responsibility is to switch the current player and the next
 player by using the method 'other()'.
 This way the first player is allowed to go first, and the other player
 will go second.
 It doesn't matter which player is player 1.
 The other player will always be player 2.
\end_layout

\begin_layout Subsection
Game
\end_layout

\begin_layout Paragraph
Game
\end_layout

\begin_layout Standard
The Game class models a game of Connect4.
 This class makes use of Observable and Runnable.
 Furthermore this class uses the Board class in the constructor, so a new
 board will be made for this specific game.
 Using these classes and interfaces, the main priority of this Game class
 is to create, play and end a game of Connect4.
\end_layout

\begin_layout Section
Presenter
\end_layout

\begin_layout Subsection
Board
\end_layout

\begin_layout Paragraph
BoardPresenter
\end_layout

\begin_layout Subsection
Game
\end_layout

\begin_layout Paragraph
GamePresenter
\end_layout

\begin_layout Paragraph
NewGamePresenter
\end_layout

\begin_layout Subsection
Space
\end_layout

\begin_layout Paragraph
SpacePresenter
\end_layout

\begin_layout Subsection
Presenter
\end_layout

\begin_layout Paragraph
FourCharmFactory
\end_layout

\begin_layout Paragraph
FourCharmPresenter
\end_layout

\begin_layout Section
Server
\end_layout

\begin_layout Paragraph
ClientHandler
\end_layout

\begin_layout Standard
A ClientHandler is responsible for maintaining a connection with a client
 and passing received commands to the ClientGroup the ClientHandler currently
 resides in.
 For parsing the received commands from the client the C4 Protocol module
 is used.
 The ClientHandler can also be used by other parts of the server to send
 commands to the client.
 
\end_layout

\begin_layout Paragraph
FourCharmServer
\end_layout

\begin_layout Standard
The FourCharmServer class that is responsible for the server.
 The FourCharmServer makes sure that at a given time there are no players
 with the same name.
 This class also maintains a list of GameGroups and uses the PreLobbyGroup
 and LobbyGroup to model the state of clients.
 
\end_layout

\begin_layout Paragraph
GameGroup
\end_layout

\begin_layout Standard
The GameGroup class extends the ClientGroup abstract class and implements
 Observer.
 This class uses the Protocol classes as well.
 Two Clients play against each other in the GameGroup.
\end_layout

\begin_layout Paragraph
LobbyGroup
\end_layout

\begin_layout Standard
The LobbyGroup class extends the ClientGroup abstract class.
 It makes a Lobby and adds Clients to the LobbyGroup.
 From these Clients, whenever they are ready, 2 are chosen and they will
 be added to the GameGroup to start a new game.
 Before a Client can enter the LobbyGroup, he will be in the PreLobbyGroup
 as long as he did not give the command 'join'.
\end_layout

\begin_layout Paragraph
PreLobbyGroup
\end_layout

\begin_layout Standard
The PreLobbyGroup class extends the ClientGroup abstract class.
 Every Client that wants to play a game has to enter the PreLobbyGroup first.
 After this, by using the command join, the Client will be able to move
 to the LobbyGroup to find a partner to play a game with.
 This class makes use of the Protocol classes as well.
\end_layout

\begin_layout Section
View
\end_layout

\begin_layout Paragraph
FourCharmGUI
\end_layout

\begin_layout Standard
The FourCharmGUI is the Graphical User Interface of the FourCharm Connect4
 game.
 It makes use of the FourCharmController, Presenter, Factory and Game class.
\end_layout

\begin_layout Paragraph
FourCharmTUI
\end_layout

\begin_layout Standard
The FourCharmTUI is the Textual User Interface of the FourCharm Connect4
 game.
 It makes use of the FourCharmController, and Game class, as well as the
 AI strategies.
 The TUI takes care of communication with a user and uses the controller
 for communication with the rest of the system.
 
\end_layout

\begin_layout Section
Controller
\end_layout

\begin_layout Paragraph
FourCharmController
\end_layout

\begin_layout Chapter
Test report
\end_layout

\begin_layout Section
Unit testing
\end_layout

\begin_layout Standard
For Unit testing we mainly made use of dedicated test classes.
 We also made use of Mocking.
 Mocking is testing a unit in isolation or create a sufficient environment.
 To do so, you have to create and simulate mocked objects (replacements
 for collaborators in a test-oriented way).
 The Mock Objects simulate the object that is replaced.
\begin_inset Note Comment
status open

\begin_layout Plain Layout
LINK naar mocked.comorgnl
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Client
\end_layout

\begin_layout Paragraph
ServerHandlerTest
\end_layout

\begin_layout Standard
The ServerHandler has been tested in isolation by using mocked instances.
 The CoreClient.Client, FourCharmController and Socket instances are mocked
 instances.
 The startGame() en gameEnd() methods have been tested as well as the joinServer
(), accept(), doneMove(), handleServerCommands() and setStrategy() methods.
 These tests are done by JUNIT testing.
\end_layout

\begin_layout Subsection
Model
\end_layout

\begin_layout Standard
In this section the tests of the model package are shown and discussed.
 
\end_layout

\begin_layout Subsubsection
AI
\end_layout

\begin_layout Standard
These are the tests of the strategies of the computer player in the AI package
 in the model package.
\end_layout

\begin_layout Paragraph
NegaMaxStrategyTest
\end_layout

\begin_layout Standard
The NegaMaxStrategy class has been tested by using JUNIT tests.
 A dedicated test class has been made.
 The only method that has been tested is the doMove() method of the NegaMaxStrat
egy class.
 An assertTrue checks if the column has free space left and determines a
 move.
 This class is not tested in isolation: the class makes use of the Board
 class.
\end_layout

\begin_layout Paragraph
RandomStrategyTest
\end_layout

\begin_layout Standard
The RandomStrategy class has been tested the same way as the NegaMaxStrategy.
 The dedicated test class was not tested in isolation because the class
 makes use of the Board class to make a move.
 The doMove() method is the only method that is tested.
 This method is tested the same way as the NegaMaxStrategy with an assertTrue.
\end_layout

\begin_layout Subsubsection
Board
\end_layout

\begin_layout Standard
These are the tests of the board package in the model package.
\end_layout

\begin_layout Paragraph
BoardTest
\end_layout

\begin_layout Standard
The Board class is tested in isolation.
 This class is one of the most complex classes that needed a lot of testing.
 A lot of different states of the board can be seen in the dedicated test
 class.
 For instance if a column is full, then the columnHasFreeSpace(col) method
 should report false.
 The deepcopy() method has also been tested by checking if the 'new/deepcopy'
 board equals the old board.
 
\end_layout

\begin_layout Standard
A lot of testing has been done for the checking if a player has a winstreak:
 the player needs to have at least 4 slots in a row (vertical, horizontal
 and or diagonal).
 The positioncode of the same move and of a different move have been tested
 as well.
 Almost all of the tests are done by using assertEquals, assertTrue and
 assertFalse.
\end_layout

\begin_layout Subsubsection
Player
\end_layout

\begin_layout Standard
These are the tests of the player package in the model package.
\end_layout

\begin_layout Paragraph
LocalAIPlayerTest
\end_layout

\begin_layout Standard
The LocalAIPlayer class has been tested by JUNIT tests.
 It is not tested in complete isolation, but a dedicated test class has
 been made.
 Two RandomStrategy Local AI players will play a game in this test class.
 The tests are about the current player, if there is a winner of the game
 after it was finished, if the board is not null, etc.
 The tests are done by using assertTrue, assertFalse and assertEquals.
\end_layout

\begin_layout Subsubsection
Game
\end_layout

\begin_layout Paragraph
GameTest
\end_layout

\begin_layout Standard
The Game class has been tested by JUNIT tests.
 The tests are not done in complete isolation, but a dedicated test class
 has been made.
 By using assertTrue and assertEquals the methods doMove() and getMark()
 are tested to see if they do what they should do.
 
\end_layout

\begin_layout Subsection
Server
\end_layout

\begin_layout Paragraph
ClientHandlerTest
\end_layout

\begin_layout Standard
The ClientHandler class has been tested by JUNIT tests.
 It has been tested in isolation by making a dedicated test class.
 In this test, the Socket and Clientgroup are mocked.
 Socket is mocked, so all of the instances are mocked instances.
 ClientGroup is injectable, so only that instance is mocked.
\end_layout

\begin_layout Paragraph
FourCharmServerTest
\end_layout

\begin_layout Standard
The FourCharmServer class has been tested by JUNIT tests in isolation from
 the other classes.
 The isolation is done by making a dedicated mocked class.
 The PreLobbyGroup, LobbyGroup, GameGroup and ServerSocket are mocked, thus
 all of the instances are mocked instances.
\end_layout

\begin_layout Paragraph
GameGroupTest
\end_layout

\begin_layout Standard
The GameGroup class has been tested in isolation from other classes by JUNIT
 tests.
 The dedicated mocked class has multiple mocked instances.
 The FourCharmServer, ClientHandler and game instances are mocked, so simulated
 instances.
\end_layout

\begin_layout Paragraph
LobbyGroupTest
\end_layout

\begin_layout Standard
The LobbyGroup class has been tested by making use of mocked instances.
 The Socket and ClientGroup instances are the only instances that are not
 mocked.
 This test has been done in isolation by making a dedicated test class LobbyGrou
pTest.
\end_layout

\begin_layout Paragraph
PreLobbyGroupTest
\end_layout

\begin_layout Standard
The PreLobbyGroup class makes use of mocked instances for testing as well.
 The dedicated test class constists of two mocked instances (FourCharmServer
 and CoreClient.Client).
 The test class does not consist of only mocked instances.
\end_layout

\begin_layout Subsection
Controller
\end_layout

\begin_layout Paragraph
FourCharmControllerTest
\end_layout

\begin_layout Section
System testing
\end_layout

\begin_layout Standard
The main point of system testing is to test the server and additionally
 a small part of the board has been tested.
 The system has been tested by using integration tests.
 We thought of features the server should have and came up with some different
 scenarios.
 Each scenario is accompanied by a 'Given', 'When' and 'Then' part.
 Given something, when I do another thing, then the server should do this.
\end_layout

\begin_layout Subsection
Testing commands
\end_layout

\begin_layout Standard
In this test, the feature 'the server recognizes invalid commands' has been
 tested.
 The different scenarios and test result are shown below.
 
\end_layout

\begin_layout Paragraph
Scenario: The server sends an error when a invalid command is sent.
\end_layout

\begin_layout Verse
Given a empty server 
\end_layout

\begin_layout Verse
When I send the command 'bogus' 
\end_layout

\begin_layout Verse
Then the server will send an InvalidCommandError
\end_layout

\begin_layout Standard
The command bogus is a command that does not exist.
 The server should send an InvalidCommandError whenever the not existing
 command has been received.
\end_layout

\begin_layout Paragraph
Scenario: Client sends ready in connected state 
\end_layout

\begin_layout Verse
Given a empty server 
\end_layout

\begin_layout Verse
When I send the ready command 
\end_layout

\begin_layout Verse
Then the server will send an InvalidCommandError
\end_layout

\begin_layout Standard
The Client needs to join the lobby first before he will be able to send
 the ready command.
 The server should handle this with an InvalidCommandError.
\end_layout

\begin_layout Paragraph
Scenario: Client sends ready twice 
\end_layout

\begin_layout Verse
Given a empty server 
\end_layout

\begin_layout Verse
When I join the server with name Wouter 
\end_layout

\begin_layout Verse
And I send the ready command 
\end_layout

\begin_layout Verse
Then the server will accept me 
\end_layout

\begin_layout Verse
And I send the ready command 
\end_layout

\begin_layout Verse
Then the server will send an InvalidCommandError
\end_layout

\begin_layout Standard
The Client is not allowed to send the ready command twice in a row.
 He is not allowed to play against himself.
 The server needs to make sure this does not happen by sending an InvalidCommand
Error.
\end_layout

\begin_layout Paragraph
Scenario: Client sends join in lobby state 
\end_layout

\begin_layout Verse
Given a empty server 
\end_layout

\begin_layout Verse
When I join the server with name Wouter 
\end_layout

\begin_layout Verse
Then the server will accept me 
\end_layout

\begin_layout Verse
And I join the server with name Frits 
\end_layout

\begin_layout Verse
Then the server will send an InvalidCommandError
\end_layout

\begin_layout Standard
The Client has already joined the server and is not allowed to enter the
 server once more (even though the name of the Client is different).
 The server should send the InvalidCommandError and refuse the Client to
 join again.
\end_layout

\begin_layout Subsection
Testing disconnects from the server
\end_layout

\begin_layout Standard
In this test, the server is tested for handling disconnects from clients.
 The only scenario that needed to be tested is shown below.
\end_layout

\begin_layout Paragraph
Scenario: Client disconnects while in a game 
\end_layout

\begin_layout Verse
Given the client is in a game with another player 
\end_layout

\begin_layout Verse
When I disconnect from the server 
\end_layout

\begin_layout Verse
Then the server sends a PlayerDisconnectError to the other player 
\end_layout

\begin_layout Verse
And the server sends an end_game command
\end_layout

\begin_layout Standard
If a Client disconnects in a game, the server needs to stop the game and
 send the PlayerDisconnectError to the other player to let him know what
 happened and why the game stopped.
\end_layout

\begin_layout Subsection
Testing joins to the server
\end_layout

\begin_layout Standard
This test is about the way the server handles the join command from the
 clients.
 The scenarios and results are shown below.
\end_layout

\begin_layout Paragraph
Scenario: Name not yet exists in server 
\end_layout

\begin_layout Verse
Given a empty server 
\end_layout

\begin_layout Verse
When I join the server with name Wouter 
\end_layout

\begin_layout Verse
Then the server will accept me
\end_layout

\begin_layout Standard
If the Client enters a server with a non existing name, the server should
 allow the Client to join.
 
\end_layout

\begin_layout Paragraph
Scenario: Name exists in server 
\end_layout

\begin_layout Verse
Given a server with one connected client 
\end_layout

\begin_layout Verse
When I join the server with the same name 
\end_layout

\begin_layout Verse
Then the server will send an InvalidUserName error
\end_layout

\begin_layout Standard
Whenever the Client tries to join the server with a name that already exists
 in the server, the server should not allow the Client to join.
 An InvalidUsernameError should be send by the server.
\end_layout

\begin_layout Paragraph
Scenario: Name is not valid according to protocol 
\end_layout

\begin_layout Verse
Given a empty server 
\end_layout

\begin_layout Verse
When I join the server with name Wouter@ 
\end_layout

\begin_layout Verse
Then the server will send an InvalidParameterError with Wouter@
\end_layout

\begin_layout Standard
If the Client wants to join the server, but the name is not according to
 the protocol, the Client is not allowed to join the server.
 The server will send an InvalidParameterError with the 'wrong' name.
\end_layout

\begin_layout Subsection
Testing starting a game
\end_layout

\begin_layout Standard
This test is about starting a game.
 The server needs to have at least two players who sent the ready command
 to start a game.
 The scenarios and results of this test are shown below.
\end_layout

\begin_layout Paragraph
Scenario: The client sends a 'ready' command 
\end_layout

\begin_layout Verse
Given a server with one other ready player 
\end_layout

\begin_layout Verse
When I join the server with name Wouter 
\end_layout

\begin_layout Verse
Then the server will accept me 
\end_layout

\begin_layout Verse
And I send the ready command 
\end_layout

\begin_layout Verse
Then the server starts a game with the other ready player and me
\end_layout

\begin_layout Standard
The server should start a game whenever there are two players ready.
 
\end_layout

\begin_layout Paragraph
Scenario: The client sends a 'ready' command 
\end_layout

\begin_layout Verse
Given a server with no other ready players 
\end_layout

\begin_layout Verse
When I send the ready command 
\end_layout

\begin_layout Verse
Then the server waits with putting me in a game until another player is
 ready as well
\end_layout

\begin_layout Standard
If the Client sends the ready command, but there is not another ready player,
 the server should wait with starting a game until there is another player
 ready.
\end_layout

\begin_layout Subsection
Testing making a move
\end_layout

\begin_layout Standard
This test is about making moves: when and where the Client is allowed to
 make a specific move.
 The different scenarios and results are shown below.
\end_layout

\begin_layout Paragraph
Scenario: Client is in a game and it's his turn 
\end_layout

\begin_layout Verse
Given a game with two players and it's the clients turn 
\end_layout

\begin_layout Verse
When I send a 'do move 4' command 
\end_layout

\begin_layout Verse
Then the server sends the move 4 to both the players 
\end_layout

\begin_layout Verse
And the server sends a requestmove to the other player
\end_layout

\begin_layout Standard
Whenever a Client is in a game and it's his turn, the server should allow
 him to make a valid move.
 The server needs to receive the move and send it to both the players.
 After this it will be the other players turn, so the server should send
 a requestmove to the other player.
\end_layout

\begin_layout Paragraph
Scenario: Client is in a game, but it's not his turn
\end_layout

\begin_layout Verse
Given a game with two players and it's not the clients turn 
\end_layout

\begin_layout Verse
When I send a 'do move 4' command 
\end_layout

\begin_layout Verse
Then the server will send an InvalidMoveError 
\end_layout

\begin_layout Standard
If a Client is in a game, but it not his turn, the server should not allow
 him to make a move.
 An InvalidMoveError should be send whenever the Client tries to make the
 move while it is not his turn.
\end_layout

\begin_layout Paragraph
Scenario: Client is not in a game 
\end_layout

\begin_layout Verse
Given a client that is in a server, but not yet in a game 
\end_layout

\begin_layout Verse
When I send a 'do move 4' command 
\end_layout

\begin_layout Verse
Then the server will send an InvalidCommandError
\end_layout

\begin_layout Standard
If the Client is not in a game, he is not allowed to make a move.
 This would be a invalid command.
 The server should send an InvalidCommandError and not allow the Client
 to do this command.
\end_layout

\begin_layout Paragraph
Scenario: Client is in a game, but sends a invalid move 
\end_layout

\begin_layout Verse
Given a game with two players and it's the clients turn 
\end_layout

\begin_layout Verse
When I send a 'do move 7' command 
\end_layout

\begin_layout Verse
Then the server will send an InvalidParameterError with 7
\end_layout

\begin_layout Standard
Whenever a Client is in a game and it is his turn, but he tries to make
 a invalid move, the server should not allow this to happen.
 The server should send an InvalidParameteError with the attempted move.
\end_layout

\begin_layout Chapter
Metrics report
\end_layout

\begin_layout Chapter
Reflection on planning
\end_layout

\begin_layout Section
Planning influenced by experiences
\end_layout

\begin_layout Section
Actual progress
\end_layout

\begin_layout Section
Countermeasures
\end_layout

\begin_layout Section
What did we learn
\end_layout

\begin_layout Section
Next year's student assistent
\end_layout

\begin_layout Chapter
\start_of_appendix
\begin_inset CommandInset label
LatexCommand label
name "chap:BinaryBoard"

\end_inset

BinaryBoard
\end_layout

\begin_layout Standard
\begin_inset Formula $H1=111_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $H2=1000_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $SIZE=101010_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $SIZE1=110001_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ALL1=1111111111111111111111111111111111111111111111111_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $COL1=1111111_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $BOTTOM=1000000100000010000001000000100000010000001_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $TOP=1000000100000010000001000000100000010000001000000_{2}$
\end_inset


\end_layout

\begin_layout Standard
The static variables above are corresponding to values COLUMNS = 7 and ROWS
 = 6
\end_layout

\begin_layout Subsection
Board position numbering
\end_layout

\begin_layout Standard
The following board position numbering will be used:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="7">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
26
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
33
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
39
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
46
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
38
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
45
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
37
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
44
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
36
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
43
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
35
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
42
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Keeping state
\end_layout

\begin_layout Standard
The model uses four variables to keep the board state:
\end_layout

\begin_layout Itemize
int array moves: keeps an list of all moves performed during the game
\end_layout

\begin_layout Itemize
int nplies: number of moves since the start of the games, also used to determine
 current player
\end_layout

\begin_layout Itemize
byte array height: for each column in the board keeps the index of the lowest
 free spot
\end_layout

\begin_layout Itemize
long array color: for each of the two players an long keeping the current
 piece configuration
\end_layout

\begin_layout Subsection
Bust a move
\end_layout

\begin_layout Standard
The following procedure is used to save the making of an move:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
color[player]\: XOR\,1\ll height[col]
\]

\end_inset


\end_layout

\begin_layout Standard
This says as much as set an one at the bit index of the board position
\end_layout

\begin_layout Subsection
Detecting column overflow
\end_layout

\begin_layout Standard
The 'AND' operator is used on the long for the player and TOP.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
color[player]\: AND\: TOP
\]

\end_inset


\end_layout

\begin_layout Standard
As can be seen in the numbering of board positions, there is a gap of one
 between the index of the top spot of a column and the index of the lowest
 spot of the following column.
 The bits with these indexes have been set to 1 in TOP.
 For a valid board this operation always return 0.
 If however one of the columns overflowed, this operation returns 1.
 Therefore it is simply tested if this operation returns 0;
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "fourcharm"
options "IEEEtran"

\end_inset


\end_layout

\end_body
\end_document

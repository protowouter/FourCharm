#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrreprt
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "FourCharm: A client-server Connect4 game"
\pdf_author "Luce Sandfort, Wouter Timmermans"
\pdf_subject "Maintenance document for FourCharm"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle plain
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
FourCharm: A client-server Connect4 Game
\end_layout

\begin_layout Author
Luce Sandfort 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Wouter Timmermans
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Overall Design
\end_layout

\begin_layout Standard
Early on in the design of our system we recognized that the protocol that
 would handle the communication between the client and server could be extracted
 from the rest of the system.
 This protocol implementation is available at Github.com 
\begin_inset CommandInset citation
LatexCommand cite
key "c4-protocol"

\end_inset

.
 Our system therefore consists of two parts: FourCharm and C4 Protocol.
\end_layout

\begin_layout Section
Class Diagrams
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Global-overview-of"

\end_inset

Global overview of FourCharm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Global overview
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Global-overview-of"

\end_inset

 gives an overview of the global design of the system.
 
\end_layout

\begin_layout Paragraph
Model
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Model-package"

\end_inset

 is a detailed class diagram of the Game model component of our system.
 The main entry point to the Game model is the Game class.
 The game class uses a Board and two Players to achieve te responsibilities.
 The Board is responsible to maintain a valid Board state and the Game makes
 sure that only the current player can make a move.
 We have developed two Board implementations: ReferenceBoard and BinaryBoard.
 The binary board implementation is explained in more detail at 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:BinaryBoard"

\end_inset

.
 The ReferenceBoard class is an implementation of the Board that is a little
 bit more orthodox.
 ReferenceBoard is mainly used for performance comparison to the BinaryBoard.
 Both boards conform to the same specification and are 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset


\begin_inset Quotes erd
\end_inset


\begin_inset Quotes erd
\end_inset


\begin_inset Quotes erd
\end_inset


\begin_inset Quotes erd
\end_inset

 to the same test regimen.
 The Player interface is implemented by two Classes, ASyncPlayer and LocalAIPlay
er.
 A LocalAIPlayer uses a GameStrategy to determine the best move.
 The ASyncPlayer class is meant for Players which receive input in a Asynchronou
s way: this could be a player connected via a server or a human player connected
 to the local machine.
 There is also the LocalHumanPlayer class which extends ASyncPlayer and
 provides no further functionality, this is chiefly done to simplify checking
 if the current player is a human connected to the local machine.
 No distinction is made between AI an human players connected via a server.
 The GameStrategy collection of classes is also used to provide hint functionali
ty to a locally connected user.
 
\end_layout

\begin_layout Paragraph
View
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:View-package-class"

\end_inset

 gives an overview of our views.
\end_layout

\begin_layout Standard
Our system has two implementations of the FourCharmView interface.
 The main responsibility of controlling user input lies at the controller,
 but the Views are responsible for displaying changes in the game state.
 This reduces the unnecessary passing around of the board between the controller
 and the view.
 The two implementations of the FourCharmView interface are the FourCharmGUI
 (a graphical user interface) and the FourCharmTUI (a textual user interface).
 The views 
\end_layout

\begin_layout Paragraph
Controller
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Controller-and-ServerHandler"

\end_inset

 is the class diagram of the controller and the serverhandler of our system.
\end_layout

\begin_layout Standard
We have made two controllers, one for the client part and one for the server
 part of our system.
 The controller takes care of instantiating the views and updating the state
 of the view and sending and receiving messages from the view and relaying
 these to other parts of the system.
 The ServerHandler class maintains a connection with a server, the ServerHandler
 communicates with the FourCharmController which makes sure the views are
 updated with the new information received from the server.
 The controller also keeps the game that is currently being played, no matter
 if it is a networked game or a local game.
\end_layout

\begin_layout Paragraph
Presenter
\end_layout

\begin_layout Paragraph
Server
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Server-package"

\end_inset

 is a detailed class diagram of the server component of our system.
 From a birds eye perspective, the server consists of three parts: 
\end_layout

\begin_layout Enumerate
FourCharmServer: this is the main server class that listens for incoming
 connections and creates new ClientHandlers for every incoming connection.
 This class also keeps track of all running games.
\end_layout

\begin_layout Enumerate
ClientGroup: models a collection of clients, this class is extended by PrelobbyG
roup, LobbyGroup and GameGroup.
\end_layout

\begin_layout Enumerate
ClientHandler: holds the connection to a client.
 ClientHandler uses C4 Protocol to parse incoming commands from the server
 and relays these messages to the ClientGroup this ClientHandler currently
 resides.
\end_layout

\begin_layout Standard
Because there are multiple commands in the protocol that have different
 meanings, depending on the state of the client, we decided that a Client
 is always in a ClientGroup.
 All of the different ClientGroups have their own implementation of the
 commands.
 This way the protocol behavior is modeled on a way that improves maintainabilit
y.
\end_layout

\begin_layout Standard
Whenever a Client is connected to the server, he will start in the PreLobbyGroup.
 If the Client gives the command 'join' and he is accepted by the server,
 he will be deleted from the PreLobbyGroup.
 Then, the Client will be added to the LobbyGroup.
 In here, whenever two Clients give the command 'ready' a game will be started
 with these two Clients.
 This will be done by putting them into the GameGroup.
 When the game is finished, the Clients are send back to the LobbyGroup
 where they will stay until they either start a new game or exit the game
 of Connect Four.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Model-package"

\end_inset

Model package
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:View-package-class"

\end_inset

View package class diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Controller-and-ServerHandler"

\end_inset

Controller and ServerHandler
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Presenter-package"

\end_inset

Presenter package
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Server-package"

\end_inset

Server package
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Requirements
\end_layout

\begin_layout Standard
This section includes a description of the way we implemented the Functional
 requirements of the application.
 For an general overview you can refer to table 
\begin_inset CommandInset ref
LatexCommand vref
reference "tab:The-requirements-for"

\end_inset

 for the server requirements and table 
\begin_inset CommandInset ref
LatexCommand vref
reference "tab:The-requirements-for-1"

\end_inset

 for the client.
\end_layout

\begin_layout Subparagraph
Server
\end_layout

\begin_layout Standard
The entry point for the server is the FourCharmServer class.
 This class accept clients and creates a ClientHandler to take care of sending
 and receiving the commands.
 ClientHandler uses a C4 Protocol C4Processor to convert incoming command
 strings to method calls on the ClientHandler.
 C4 Protocol checks all parameters and parses them to native Java types.
 When one of the parameters is not correct a C4Exception is thrown, that
 error is then sent to the client.
 C4 Protocol also makes sure that the error never sends a command that doesn't
 respect the protocol because it throws a C4Exception when this is attempted.
 
\end_layout

\begin_layout Standard
Games, the Lobby and the PreLobby are modeled as ClientGroups.
 A ClientGroup is just a collection of ClientHandlers, it allows adding
 and removing of ClientHandlers and checking if a particular name already
 exists in the group.
 The FourCharmServer maintains a list of all running games.
 Because of this the server supports the running of an arbitrary amount
 of games simultaneously.
 The clienthandlers forward the received commands to the current group the
 clienthandler is in.
 The FourCharmServer class offers an minimal UI for monitoring communication
 messages and entering or changing the port number the server listens on.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features rotate="0" tabularvalignment="middle" tabularwidth="100col%">
<column alignment="center" valignment="top" width="8col%">
<column alignment="center" valignment="top" width="40col%">
<column alignment="center" valignment="top" width="42col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requirement
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Implemented by class
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Server is started
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmServer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Server listens to entered port number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmServerController
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error message if the port number is in use
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmServer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
New port number can be entered
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmServerTUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A server can support multiple instances of the game that are played simultaneous
ly by different clients
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameGroup/FourCharmServer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All communication messages are written to System.out
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmServer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The server respects the written protocol and is able to communicate with
 all other clients from the tutorial group
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C4 Protocol
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:The-requirements-for"

\end_inset

The requirements for the server
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Client
\end_layout

\begin_layout Standard
The entry point for the client portion of our system is the FourCharmController
 class.
 Dependent on the program arguments given to the main method the controller
 starts a GUI or a TUI.
 The client also uses the model collection of classes for the game logic.
 The user friendliness is the responsibility of the FourCharmTUI and the
 FourCharmGUI.
 The controller both supports local games without a server and games played
 via a server.
 The class ServerHandler is responsible for communicating with the server
 using C4 Protocol.
 C4 Protocol again makes sure that only valid commands are processed and
 that no invalid commands are being sent.
 The ServerHandler class is the only class that has access to the C4 Protocol
 Server Client and is therefore responsible for all communications with
 the server and makes sure that commands only get sent when the client is
 in the correct state according to the protocol.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top" width="8col%">
<column alignment="center" valignment="top" width="60col%">
<column alignment="center" valignment="top" width="32col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requirement
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Implemented by class
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User friendly TUI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmTUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TUI provides option to request a game at the server (enter port number and
 IP address)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmTUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Client supports human players and computer players (AI)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmController
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The maximum thinking time of the computer player should be a parameter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MTDfStrategy
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The client provides a 'hint' functionality.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmView
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The 'hint' functionality is a possible move and may only be proposed to
 the human player
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmController
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
After a game has finished, the player should be able to start a new game
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmTUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Other players should be informed if a player quits the game before it has
 finished, closes the UI or the client crashes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmController
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
After 8, the other player should be allowed to register again with the server
 to play the game
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FourCharmTUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If a server disconnects, the client should react to this in a decent way
 (closing all open connections, etc.)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServerHandler
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The client respects the written protocol and is able to communicate with
 all other clients from the tutorial group
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C4 Protocol
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:The-requirements-for-1"

\end_inset

The requirements for the client
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Programming Patterns
\end_layout

\begin_layout Subsection
Observer
\end_layout

\begin_layout Standard
There is only one class in our application that is an Observable: Game.
 There are however multiple classes that are Observers.
\end_layout

\begin_layout Standard
The observer pattern is used in multiple places in our application.
 Both the view and the controller are observers of the Game.
 The view just renders the board on an update, the controller checks wether
 input from a human is required and enables the move input of the view when
 it is.
 GameGroup is also an Observer of Game, after every move when notifyObserver
 is called, the server notifies all clients in the Game of the current player.
 When the game has ended the server also informs all clients in the GameGroup
 of this.
 The observer pattern allows us to decouple the game logic from the rest
 of the system.
 The model doesn't need to have any knowledge of the the other system components
 that use is.
 The view and the controller and the GameGroup however need to know about
 the Game and how to use it.
 
\end_layout

\begin_layout Subsection
Model View Controller
\end_layout

\begin_layout Standard
In developing of our system we made use of the Model View Controller pattern
 for the client-side UI.
 The model consists of the Game, Board, Player and Mark classes.
 The responsibility of the model is to represent the game logic of our system,
 it keeps track of the current player, asks the players for moves and makes
 sure the game state is consistent.
 The view is responsible for showing the state of the model to the user
 and for handling user interaction.
 The controller takes care of the manipulation of the model.
 In our implementation both the view and the controller are observers of
 the Game, the view updates the board representation and the controller
 checks if user input for a move is required.
\end_layout

\begin_layout Paragraph
Presenter
\end_layout

\begin_layout Quotation
For the Graphical User Interface we added an addition layer in the form
 of presenters.
 We made use of FXML 
\begin_inset CommandInset citation
LatexCommand cite
key "fxml-intro"

\end_inset

views, because these views contain no logic another layer of logic is needed.
 For this we used a presenter for every view in the GUI collection of views.
 The presenters are responsible for updating the view elements and responding
 to user input.
 The view is just a description of how the model is represented.
 This division has the added benefit that the appearance can be changed
 by editing the FXML views without searching in the presenter for the location
 where the appearance is set.
\end_layout

\begin_layout Chapter
Classes
\end_layout

\begin_layout Standard
In this chapter, every class in our system of the game Connect Four will
 be discussed.
 The discussion will be about the role of the class in the system, the responsib
ilities of the class and the other classes this class uses to fulfill its
 responsibilities.
 Furthermore, special cases in the classes contract and any precautions
 taken to fulfill the preconditions in the contract of the server classes
 will be discussed where necessary.
\end_layout

\begin_layout Standard
The classes are divided in packages by putting classes together that are
 doing a similar job.
 The sections in this chapter will represent the different packages.
\end_layout

\begin_layout Section
Client
\end_layout

\begin_layout Paragraph
ServerHandler
\end_layout

\begin_layout Standard
Handles the connection to the server from the perspective of the client.
 This class makes use of the C4 Protocol module classes, the Game class
 and the strategy classes to achieve its responsibilities.
\end_layout

\begin_layout Section
Controller
\end_layout

\begin_layout Paragraph
C4Server
\end_layout

\begin_layout Standard
The C4Server class does not make use of other classes.
 This class is able to get the IP address, port and name of a given server.
 
\end_layout

\begin_layout Paragraph
FourCharmController
\end_layout

\begin_layout Standard
The FourCharmController class makes use of the view classes FourCharmTUI
 and FourCharmGUI to perfom its job.
 This class will ask the TUI or GUI class for input.
 After the input is received, the controller sends this input to the game,
 so a move will be made.
 The controller is used by the views to communicate with the other classes
 of the FourCharm game of Connect four.
\end_layout

\begin_layout Paragraph
FourCharmServerController
\end_layout

\begin_layout Standard
The FourCharmServerController class is responsible for starting and stopping
 a server.
 The startServer(int port) method and the stopServer() are the only methods
 you will find in this class.
 The server controller class makes use of the FourCharmerverTUI and the
 FourCharmServer classes to perfom its duties.
\end_layout

\begin_layout Paragraph
LobbyList
\end_layout

\begin_layout Standard
The LobbyList class has one purpose: logging the state changes of the clients.
 This class creates a map and puts clients and their states in this map.
 If the state is not 'offline' the client is added to the map.
 If the state is offline, the client will be removed from the map, because
 the server does not have to keep track of the clients that used the server
 and are not connected anymore.
\end_layout

\begin_layout Section
Exception
\end_layout

\begin_layout Paragraph
InvalidMoveException
\end_layout

\begin_layout Standard
Exception that gets thrown when a invalid move is attempted to be made.
 This class extends the normal Exception class and is used by the Board
 class.
\end_layout

\begin_layout Paragraph
ServerConnectionException
\end_layout

\begin_layout Standard
Signals that a ServerConnectionException of some sort has occurred.
 If this exception is thrown, the connection to the server cannot be made.
\end_layout

\begin_layout Paragraph
ServerStartException
\end_layout

\begin_layout Standard
The ServerStartException class gets thrown when the server is not started
 correctly.
 This class extends the Exception class.
\end_layout

\begin_layout Section
Model
\end_layout

\begin_layout Subsection
AI
\end_layout

\begin_layout Paragraph
MDTfStrategy
\end_layout

\begin_layout Standard
This MTDfStrategy class implements the interface GameStrategy.
 This is a specific strategy a computer player (LocalAIPlayer class) can
 use.
 So this class is responsible for giving the computer player brains.
 This way the computer player can think ahead and foresee certain moves.
 This class also uses the NegaMaxStrategy class to come up with new moves.
 The algorithm used by the MDTfStrategy class is the MDTf algorithm.
\end_layout

\begin_layout Paragraph
NegaMaxStrategy
\end_layout

\begin_layout Standard
The NegaMaxStrategy class implements the GameStrategy interface.
 This combination is used by the LocalAIPlayer class to make the computer
 player 'smart' and to make the computer player able to win games by foreseeing
 moves.
 The algorithm used by the NegaMaxStrategy class is the NegaMax algorithm.
 This implementation makes use of Alpha-Beta pruning and a transposition
 table to optimize performance.
\end_layout

\begin_layout Paragraph
RandomStrategy
\end_layout

\begin_layout Standard
The RandomStrategy class implements GameStrategy and is another way to make
 the computer player of the LocalAIPlayer class 'smarter'.
 Well, maybe not exactly smarter because the strategy is random, so it will
 take a lucky guess to win a game.
\end_layout

\begin_layout Subsection
Board
\end_layout

\begin_layout Paragraph
Board
\end_layout

\begin_layout Standard
The Board class Models a gameboard for the game of Connect4 and provides
 facilities for making moves and checking if a player has won.
 BinaryBoard and ReferenceBoard extend the Board class.
 This class makes use of the InvalidMoveException class which extends Exception.
 Before making a move, the Board class will check if the move is allowed
 or not.
 It will throw the InvalidMoveException if a move is not valid.
 
\end_layout

\begin_layout Paragraph
BinaryBoard
\end_layout

\begin_layout Standard
Class for modeling a board for the game connect four.
 The responsibility of this class is to keep the state of the board.
 For efficiency reasons the board state is implemented in an array of 2
 longs.
 This class makes use of the Board abstract class and the Mark class to
 achieve its responsibilities.
 In the BinaryBoard class the Mark class is used to determine the mark of
 the current player.
\end_layout

\begin_layout Paragraph
ReferenceBoard
\end_layout

\begin_layout Standard
Class for modeling a board for the game connect four.
 This class's responsibility is to keep the state of the board.
 This is the reference implementation implemented using an 2D array.
 This class makes use of the Board abstract class and the Mark class.
 In the ReferenceBoard class the Mark class is used to determine the mark
 of the current player.
\end_layout

\begin_layout Subsection
Player
\end_layout

\begin_layout Paragraph
ASyncPlayer
\end_layout

\begin_layout Standard
The AsyncPlayer class models a player that makes its decision for a move
 in a different 'Thread' than the game class.
 For instance, this could be a human connected to the local computer or
 a player on the other end of a server connection.
 This class uses in internal queue to provide synchronisation between the
 game thread and the thread which receives the input from the actual player.
\end_layout

\begin_layout Paragraph
LocalAIPlayer
\end_layout

\begin_layout Standard
Create a Artificial Intelligence (AI) player given a strategy.
 This class is responsible for making a (smart) computer player.
 The LocalAIPlayer class makes use of the GameStrategy Interface and the
 classes belonging to this interface (the MDTDfStrategy class, the NegaMaxStrate
gy class and the RandomStrategy class).
\end_layout

\begin_layout Paragraph
LocalHumanPlayer
\end_layout

\begin_layout Standard
LocalHumanPlayer extends AsyncPlayer and is used to distinguish AI and Human
 players.
 
\end_layout

\begin_layout Paragraph
Mark
\end_layout

\begin_layout Standard
The Mark enums responsibility is to get the other player in a game of Connect
 four.
 The first player (the one that is allowed to go first) and second player
 (the other player) play a game.
 It doesn't matter which player is player 1: the other player will always
 be player 2 thanks to the method other().
 The Mark enum modells the 'color' of the players.
\end_layout

\begin_layout Subsection
Game
\end_layout

\begin_layout Paragraph
Game
\end_layout

\begin_layout Standard
The Game class models a game of Connect4.
 This class makes use of Observable and Runnable.
 Furthermore this class uses the Board class in the constructor, so a new
 board will be made for this specific game.
 Using these classes and interfaces, the main priority of this Game class
 is to create, play and end a game of Connect4.
\end_layout

\begin_layout Standard
The Game class makes sure only the current player is allowed to and can
 make a move.
 This class will also end the game if one of the players is not playing
 fair.
 
\end_layout

\begin_layout Section
Presenter
\end_layout

\begin_layout Standard
The presenter classes are smaller versions of the controller and have more
 specific responsibilities.
 We chose to create different classes for different functions of the GUI,
 because putting all of these responsibilities into one class would make
 that class very confusing.
 The responsibilities of the different presenters are discussed below.
\end_layout

\begin_layout Subsection
Board
\end_layout

\begin_layout Paragraph
BoardPresenter
\end_layout

\begin_layout Standard
The BoardPresenter class is the presenter for the board in a game of Connect
 four.
 This presenter is able to draw a board, highlight columns and disable and
 enable spaces in a board.
\end_layout

\begin_layout Subsection
Game
\end_layout

\begin_layout Paragraph
GamePresenter
\end_layout

\begin_layout Standard
The GamePresenter class is the class that presents the game itself in a
 game of Connect4.
 This presenter makes the moves of the player visible on the screen.
 Furthermore this class shows, hides, enables and disables the buttons that
 are shown in the GUI.
 For instance, if you win a game, a button will be showed and enabled asking
 for a rematch when it is a local game.
 
\end_layout

\begin_layout Paragraph
NewGamePresenter
\end_layout

\begin_layout Standard
The NewGamePresenter class is the presenter for the initial view, right
 after you start the GUI.
 Here you are able to make a choice between a local game or a network game,
 human players or computer players, etc.
 Every single time a game has ended and you do not push the button for rematch,
 you will be sent back to this screen.
\end_layout

\begin_layout Subsection
Space
\end_layout

\begin_layout Paragraph
SpacePresenter
\end_layout

\begin_layout Standard
The SpacePresenter class is the class that presents one space in the board
 of a game of Connect four.
 This space can be empty, or have a specific color (mark).
 If the space is clicked, the space will be disabled and the space will
 be highlighted in the color of the current mark.
\end_layout

\begin_layout Subsection
Presenter
\end_layout

\begin_layout Paragraph
FourCharmFactory
\end_layout

\begin_layout Standard
The FourCharmFactory class is the link between the other presenter classes.
 This class creates a 'presenter' by using the BoardPresenterClass, the
 Game and NewGamePresenter classes and the SpacePresenter class.
\end_layout

\begin_layout Paragraph
FourCharmPresenter
\end_layout

\begin_layout Standard
The FourCharmPresenter class is the contact between the GUI and the other
 presenter classes.
 This class makes sure to send the messages to the right presenter.
 It presents the main view of the GUI.
\end_layout

\begin_layout Section
Server
\end_layout

\begin_layout Standard
In this section the classes that make the Server are discussed.
 The server is divided between a ClientHandler class, the 'real' server
 FourCharmServer and three ClientGroups (GameGroup for the clients in a
 game, LobbyGroup for the clients in the lobby and PreLobbyGroup for the
 clients that open the FourCharm game of Connect Four).
 Every server class makes use of the C4 Protocol module classes as well.
 
\end_layout

\begin_layout Paragraph
ClientGroup
\end_layout

\begin_layout Standard
Abstract class for modeling a group of clients.
 This could be a LobbyGroup, a GameGroup or a preLobbyGroup.
 This class is used by the classes mentioned before.
 
\end_layout

\begin_layout Paragraph
ClientHandler
\end_layout

\begin_layout Standard
A ClientHandler is responsible for maintaining a connection with a client
 and passing received commands to the ClientGroup the ClientHandler currently
 resides in.
 For parsing the received commands from the client the C4 Protocol module
 is used.
 The ClientHandler can also be used by other parts of the server to send
 commands to the client.
 
\end_layout

\begin_layout Paragraph
FourCharmServer
\end_layout

\begin_layout Standard
The FourCharmServer class is responsible for the server.
 The FourCharmServer makes sure that at a given time there are no players
 with the same name connected to the server.
 This class also maintains a list of GameGroups and uses the PreLobbyGroup
 and LobbyGroup to model the state of clients.
 This class has a constructor where you can enter a port number, so you
 can make a connection to a specific server.
 
\end_layout

\begin_layout Paragraph
GameGroup
\end_layout

\begin_layout Standard
The GameGroup class extends the ClientGroup abstract class and implements
 Observer.
 Two Clients play against each other in the GameGroup, so this class 'simulates'
 a game.
 After a game is finished clients are sent back to the LobbyGroup.
 
\end_layout

\begin_layout Standard
Before the clients are able to be in the game group, they will be in the
 LobbyGroup until they send the ready_for_game command to the server.
 Only if there are two clients ready, the server will place them in the
 GameGroup
\end_layout

\begin_layout Paragraph
LobbyGroup
\end_layout

\begin_layout Standard
The LobbyGroup class extends the ClientGroup abstract class.
 It makes a 'Lobby' and adds Clients to the LobbyGroup.
 Whenever two of those clients are ready (they sent the ready_for_game command
 to the server), the server will add the clients to a new GameGroup to start
 a new Game.
\end_layout

\begin_layout Standard
Before a Client can enter the LobbyGroup, he will be in the PreLobbyGroup
 and stay there as long as he did not give the join command.
\end_layout

\begin_layout Paragraph
PreLobbyGroup
\end_layout

\begin_layout Standard
The PreLobbyGroup class extends the ClientGroup abstract class.
 Every Client that wants to play a game of Connect Four has to enter the
 PreLobbyGroup first.
 After this, by using the command join, the Client will be able to move
 from the PreLobbyGroup to the LobbyGroup to find a partner to play a game
 with.
 Whenever the join command is send by the client, the server first needs
 to check if there is not another player with the same name already in the
 server.
 This is one of the requirements of the protocol of the INF-3 group.
\end_layout

\begin_layout Section
Util
\end_layout

\begin_layout Paragraph
ExtensionFactory
\end_layout

\begin_layout Standard
The ExtensionFactory class is responsible for the extensions you might want
 to add to your log in.
 For instance, if you want to join the server with the chat function, you
 need to add this as an extension.
 The ExtensionFactory class makes sure the given extension gives the right
 functionality.
 For now, a chat() method extension and a lobby() method extension were
 added.
\end_layout

\begin_layout Section
View
\end_layout

\begin_layout Paragraph
FourCharmGUI
\end_layout

\begin_layout Standard
The FourCharmGUI is the Graphical User Interface of the FourCharm Connect4
 game.
 It makes use of the FourCharmController, Presenter, Factory and Game class.
\end_layout

\begin_layout Paragraph
FourCharmServerTUI
\end_layout

\begin_layout Standard
The FourCharmServerTUI is the Textual User Interface of the FourCharmServer.
 It makes use of the FourCharmServerController class.
\end_layout

\begin_layout Paragraph
FourCharmTUI
\end_layout

\begin_layout Standard
The FourCharmTUI is the Textual User Interface of the FourCharm Connect4
 game.
 It makes use of the FourCharmController, and Game class, as well as the
 AI strategies.
 The TUI takes care of communication with a user and uses the controller
 for communication with the rest of the system.
 
\end_layout

\begin_layout Chapter
Test report
\end_layout

\begin_layout Section
Unit testing
\end_layout

\begin_layout Standard
For unit testing our system we mainly made use of dedicated test classes.
 We did these unit tests with JUnit.
 Unit tests are meant to test your units of code in isolation.
 Quickly however, we ran into issues isolating our test classes from its
 dependencies on other parts of our system or external code.
 It is not desirable to test the dependencies of the unit under test and
 the unit under test at the same time.
 One of the benefits of isolated units tests is that it can be used to quickly
 pinpoint the errors in the code.
 When the unit test depent too much on each other a single error could cause
 a lot of tests to fail, if the tests are performed in perfect isolation
 only the test for the class that contains the error fails.
 It also improves the maintainability of the tests because they are less
 dependent on the API of the dependencies.
\end_layout

\begin_layout Standard
To help isolate the class under test from its dependencies we made use of
 a technique called mocking.
 Mocking allows the programmer to inject 'fake' mocked objects in place
 of the dependencies, the tester then can have full control over the behavior
 of these mocked dependencies.
 We made use of JMockit 
\begin_inset CommandInset citation
LatexCommand cite
key "jmockit"

\end_inset

 because it uses the JVM Instrumentation feature to inject the mocked object
 at runtime and therefore we do not need to change our code.
 Mocking allows us to specify which commands are expected to be called on
 the dependencies and see the results of the called methods.
 This has allowed us to test parts of the system which would have been hard
 to test otherwise.
 
\end_layout

\begin_layout Subsection
Client
\end_layout

\begin_layout Standard
In this section the tests of the Client package are shown and discussed.
 This is the test of the ServerHandlerTest in the Client package.
\end_layout

\begin_layout Paragraph
ServerHandlerTest
\end_layout

\begin_layout Standard
The ServerHandler has been tested in isolation by using mocked instances.
 The CoreClient.Client, FourCharmController and Socket instances are mocked
 instances.
 The startGame() en gameEnd() methods have been tested as well as the joinServer
(), accept(), doneMove(), handleServerCommands() and setStrategy() methods.
 These tests are done by JUNIT testing.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:ServerHandler-test-coverage"

\end_inset

 shows the unit test coverage of the ServerHandler test.
 The score of 49% is somewhat low, however we are partial to the opinion
 that this is of no consequence because the methods that are not tested
 are either covered by the integration tests or part of an optional extension
 of the protocol.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename serverHandler test coverage.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ServerHandler-test-coverage"

\end_inset

ServerHandler test coverage
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Model
\end_layout

\begin_layout Standard
In this section the tests of the model package are shown and discussed.
 
\end_layout

\begin_layout Subsubsection
AI
\end_layout

\begin_layout Standard
These are the tests of the strategies of the computer player in the AI package
 in the model package.
\end_layout

\begin_layout Paragraph
NegaMaxStrategyTest
\end_layout

\begin_layout Standard
The NegaMaxStrategy class has been tested by using JUNIT tests.
 A dedicated test class has been made.
 The only method that has been tested is the doMove() method of the NegaMaxStrat
egy class.
 An assertTrue checks if the column has free space left and determines a
 move.
 This class is not tested in isolation: the class makes use of the Board
 class.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:NegaMaxStrategy-test-coverage"

\end_inset

 shows the test coverage of the NegaMaxStrategy class.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:NegaMaxStrategy-test-coverage"

\end_inset

 shows the test coverage of the NegaMaxStrategy test.
 We are quite happy with the results, since 95% test coverage is a good
 percentage.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename negamax strategy test coverage.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:NegaMaxStrategy-test-coverage"

\end_inset

NegaMaxStrategy test coverage
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
RandomStrategyTest
\end_layout

\begin_layout Standard
The RandomStrategy class has been tested the same way as the NegaMaxStrategy.
 The dedicated test class was not tested in isolation because the class
 makes use of the Board class to make a move.
 The doMove() method is the only method that is tested.
 This method is tested the same way as the NegaMaxStrategy with an assertTrue.
 The RandomStrategy test coverage can be seen in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:RandomStrategy-test-coverage"

\end_inset

.
 The test coverage of 70% is caused by the determineMove() method.
 The other methods are well tested.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename random strategy test coverage.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:RandomStrategy-test-coverage"

\end_inset

RandomStrategy test coverage
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Board
\end_layout

\begin_layout Standard
This is the test of the board package in the model package.
\end_layout

\begin_layout Paragraph
BoardTest
\end_layout

\begin_layout Standard
The Board class is tested in isolation.
 This class is one of the most complex classes that needed a lot of UNIT
 testing.
 A lot of different states of the board can be seen in the dedicated test
 class.
 For instance if a column is full, then the columnHasFreeSpace(col) method
 should report false.
 The deepcopy() method has also been tested by checking if the 'new/deepcopy'
 board equals the old board.
 
\end_layout

\begin_layout Standard
A lot of testing has been done for the checking if a player has a win streak:
 the player needs to have at least 4 slots in a row (vertical, horizontal
 and or diagonal).
 The position code of the same move and of a different move have been tested
 as well.
 Almost all of the tests are done by using assertEquals, assertTrue and
 assertFalse.
\end_layout

\begin_layout Standard
The test coverage of Board.java is not very high.
 This does not matter, because the method that lowers this percentage is
 the hashCode() method.
 It is not necessary to test this method.
 The test coverage is shown in figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Board.java-test-coverage"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename boardTest coverage.png
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Board.java-test-coverage"

\end_inset

Board.java test coverage
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The test coverage of the ReferenceBoard class (figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:ReferenceBoard.java-test-coverag"

\end_inset

) and the BinaryBoard class (figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:BinaryBoard.java-test-coverage"

\end_inset

) is good enough.
 Almost every method has been tested.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename referenceboard test coverage.png
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ReferenceBoard.java-test-coverag"

\end_inset

ReferenceBoard.java test coverage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename binaryboard test coverage.png
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:BinaryBoard.java-test-coverage"

\end_inset

BinaryBoard.java test coverage
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Player
\end_layout

\begin_layout Standard
These are the tests of the player package in the model package.
\end_layout

\begin_layout Paragraph
LocalAIPlayerTest
\end_layout

\begin_layout Standard
The LocalAIPlayer class has been tested by JUNIT tests.
 It is not tested in complete isolation, but a dedicated test class has
 been made.
 By using assertTrue and assertEquals the methods doMove() and getMark()
 are tested to see if they do what they should do.
 
\end_layout

\begin_layout Standard
The doMove() should determine a move if the column has a free space and
 the getMark method should return the mark of the player.
\end_layout

\begin_layout Standard
The test coverage of LocalAIPlayer is 100%.
 This is shown in figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:LocalAIPlayer.java-test-coverage"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename localaiplayer test coverage.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:LocalAIPlayer.java-test-coverage"

\end_inset

LocalAIPlayer.java test coverage
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Game
\end_layout

\begin_layout Standard
This is the game test of the game package.
\end_layout

\begin_layout Paragraph
GameTest
\end_layout

\begin_layout Standard
The Game class has been tested by JUNIT tests.
 The tests are not done in complete isolation.
 A dedicated test class has been made to test this class.
 Two RandomStrategy Local AI players will play a game in this test class.
 
\end_layout

\begin_layout Standard
Before the tests take place a setUp() method creates a new Game.
 After this the testPlay() methods starts to play the game.
 While the game is busy playing, multiple tests are done: is the game finished
 yet (if so: does the game have a winner), what is the current state of
 the board (is it not null), who is the current player, is the getPlieCount()
 not null after starting the game.
 
\end_layout

\begin_layout Standard
These tests are done by using the assertTrue, assertFalse and assertNotNull
 methods.
\end_layout

\begin_layout Standard
The test coverage is shown in figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Game.java-test-coverage"

\end_inset

.
 The coverage is not fully 100%, because the shutdown() method was really
 hard to test.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename game test coverage.png
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Game.java-test-coverage"

\end_inset

Game.java test coverage
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Server
\end_layout

\begin_layout Standard
In this section the tests of the server package are shown and discussed.
\end_layout

\begin_layout Paragraph
ClientHandlerTest
\end_layout

\begin_layout Standard
The ClientHandler class has been tested by JUNIT tests.
 It has been tested in isolation by making a dedicated test class.
 In this test, the Socket and Clientgroup are mocked.
 Socket is mocked, so all of the instances are mocked instances.
 ClientGroup is injectable, so only that instance is mocked.
\end_layout

\begin_layout Standard
In this test, the get methods and the set methods have been tested by using
 assertEquals.
 If, for instance, setClientGroup(group) should update the current group
 of the Client, this is tested by making a new group, putting (using the
 set method) the Client in there and checking if the group has been updated
 by using the getClientGroup() method.
 The join(), ready() and doMove() methods have been tested by checking if
 the commands are being sent to the current group.
 This is done by making a new Expectations() {{ }}.
 To see if the current group receives the commands, the ClientGroup instance
 is made injectable in stead of mocked.
\end_layout

\begin_layout Standard
The test coverage of the ClientHandler test can be seen in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ClientHandler-test-coverage"

\end_inset

.
 The test coverage is not particularly high, but that is not a problem.
 Most of the methods with 0% test coverage were not worth testing.
 The upper three methods could have been tested a little bit better.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename clienthandler test coverage.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ClientHandler-test-coverage"

\end_inset

ClientHandler test coverage
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
FourCharmServerTest
\end_layout

\begin_layout Standard
The FourCharmServer class has been tested by JUNIT tests in isolation from
 the other classes.
 The isolation is done by making a dedicated mocked class.
 The PreLobbyGroup, LobbyGroup, GameGroup and ServerSocket are mocked, thus
 all of the instances are mocked instances.
\end_layout

\begin_layout Standard
In this test a FourCharmServer class has been tested by opening sockets
 and starting a new server.
 When a Client wants to join the server, the FourCharmServerTest class will
 check is there already is a Client with the same name (i.e.
 if he name of the Client already exists in server).
 Most of the methods have been tested by making a new Expectations() {{
 }}.
 
\end_layout

\begin_layout Standard
The FourCharmServer test coverage can be seen in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:FourCharmServer"

\end_inset

.
 This percentage is not high, because of the new methods we added to make
 the Lobby extension possible.
 We did not have enough time to test these new methods completely.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename fourcharmserver test coverage.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:FourCharmServer"

\end_inset

FourCharmServer
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
GameGroupTest
\end_layout

\begin_layout Standard
The GameGroup class has been tested in isolation from other classes by JUNIT
 tests.
 The dedicated mocked class has multiple mocked instances.
 The FourCharmServer, ClientHandler and game instances are mocked, so simulated
 instances.
\end_layout

\begin_layout Standard
The basic commands join doMove and ready are tested whether the Client is
 allowed to use them in de GameGroup.
 The join() and ready() methods are not allowed to be used in the GameGroup,
 so an appropriate error is send (InvalidCommandError).
 The doMove command is tested by new Expectations() {{ }}.
 If there is a game and the column where you want to make your move is free,
 the move should be made.
 Furthermore making an invalid move and making a valid move while it is
 not your turn are tested.
\end_layout

\begin_layout Standard
The test coverage of this GameGroup test can be seen in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GameGroup-test-coverage"

\end_inset

.
 The update method was hard to test, which causes the low coverage percentage
 of this test.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename game group test coverage.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GameGroup-test-coverage"

\end_inset

GameGroup test coverage
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
LobbyGroupTest
\end_layout

\begin_layout Standard
The LobbyGroup class has been tested by making use of mocked instances.
 The Socket and ClientGroup instances are the only instances that are not
 mocked.
 This test has been done in isolation by making a dedicated test class LobbyGrou
pTest.
\end_layout

\begin_layout Standard
The LobbyGroup tests look a lot like the GameGroup and PreLobbyGroup tests.
 If a invalid command is called, an error should be send by the server.
 In this case the join command and the doMove command are not allowed, so
 the server will send an InvalidCommandError.
 The ready() method makes use of new Expectations () {{ }}.
 Two ClientHandlers get names in the expectations box and a GameGroup is
 made with those two ClientHandlers.
\end_layout

\begin_layout Standard
The test coverage of the LobbyGroup test can be seen in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:LobbyGroup-test-coverage"

\end_inset

.
 This percentage is high enough, so the tests of this class have been good
 enough.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename lobbygroup test coverage.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:LobbyGroup-test-coverage"

\end_inset

LobbyGroup test coverage
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
PreLobbyGroupTest
\end_layout

\begin_layout Standard
The PreLobbyGroup class makes use of mocked instances for testing as well.
 The dedicated test class consists of two mocked instances (FourCharmServer
 and CoreClient.Client).
 The test class does not consist of only mocked instances.
\end_layout

\begin_layout Standard
The PreLobbyGroup testing methods look like the testing methods from the
 LobbyGroup and the GameGroup.
 The ready() test and the doMove test should give an error, because those
 commands are not valid in the PreLobbyGroup.
 Thus the expected outcome of these method tests would be an InvalidCommandError.
\end_layout

\begin_layout Standard
The only valid command to use in this context is the join command.
 This is tested by using new Expectations() {{ }} where a situation is created
 where theServer.hasClientWithName(
\begin_inset Quotes eld
\end_inset

Wouter") does not exist.
 Whenever a client wants to connect to the server and his name is Wouter,
 he should be allowed and able to do so.
 The test for joining a server with a existing name should not let the client
 join the server: this is not allowed.
\end_layout

\begin_layout Standard
The PreLobbyGroup test coverage can be seen 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:PreLobbyGroup-test-coverage"

\end_inset

.
 This percentage is quite high, so the tests were good enough.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename prelobbygroup test coverage.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:PreLobbyGroup-test-coverage"

\end_inset

PreLobbyGroup test coverage
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Controller
\end_layout

\begin_layout Standard
In this section the tests of the controller package are shown.
 This is the controller test of the controller package.
\end_layout

\begin_layout Paragraph
FourCharmControllerTest
\end_layout

\begin_layout Standard
The FourCharmController class uses mocked instances.
 This dedicated test class has two mocked FourCharmViews and a mocked Game.
 The class is not tested in complete isolation, because instances of other
 classes have been called in several testing methods.
\end_layout

\begin_layout Standard
Tests are done for the start of a network game and for the start of a local
 game with human players or AI players.
 These methods are tested by using new Expectations() {{ }}.
 The expectations box 'creates' a game and after that the controller will
 be able to start the game.
 Whenever a game shuts down or a client disconnects the controller needs
 to send a shutdown() command.
 This is tested in two different methods by using the expectations box in
 which either the game stops, or the client disconnects.
 The get and set human / AI move are also tested by expectation boxes and
 mocked instances.
\end_layout

\begin_layout Standard
The test coverage overview of the FourCharmControllerTest can be seen in
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:FourCharmController-test-coverag"

\end_inset

.
 This class has a lot of methods and we tried to test these method as good
 as possible.
 The percentage of the coverage of the test is not that high.
 This is caused by a couple of methods that were hard to test.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename fourcharmcontroller test coverage.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:FourCharmController-test-coverag"

\end_inset

FourCharmController test coverage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
System testing
\end_layout

\begin_layout Standard
The main point of system testing is to test the server and additionally
 a small part of the board has been tested.
 The system has been tested by using integration tests.
 We thought of features the server should have and came up with some different
 scenarios.
 Each scenario is accompanied by a 'Given', 'When' and 'Then' part.
 Given something, when I do another thing, then the server should do this.
\end_layout

\begin_layout Subsection
Testing commands
\end_layout

\begin_layout Standard
In this test, the feature 'the server recognizes invalid commands' has been
 tested.
 The different scenarios and test result are shown below.
 
\end_layout

\begin_layout Paragraph
Scenario: The server sends an error when a invalid command is sent.
\end_layout

\begin_layout Verse
Given a empty server 
\end_layout

\begin_layout Verse
When I send the command 'bogus' 
\end_layout

\begin_layout Verse
Then the server will send an InvalidCommandError
\end_layout

\begin_layout Standard
The command bogus is a command that does not exist.
 The server should send an InvalidCommandError whenever the not existing
 command has been received.
\end_layout

\begin_layout Paragraph
Scenario: Client sends ready in connected state 
\end_layout

\begin_layout Verse
Given a empty server 
\end_layout

\begin_layout Verse
When I send the ready command 
\end_layout

\begin_layout Verse
Then the server will send an InvalidCommandError
\end_layout

\begin_layout Standard
The Client needs to join the lobby first before he will be able to send
 the ready command.
 The server should handle this with an InvalidCommandError.
\end_layout

\begin_layout Paragraph
Scenario: Client sends ready twice 
\end_layout

\begin_layout Verse
Given a empty server 
\end_layout

\begin_layout Verse
When I join the server with name Wouter 
\end_layout

\begin_layout Verse
And I send the ready command 
\end_layout

\begin_layout Verse
Then the server will accept me 
\end_layout

\begin_layout Verse
And I send the ready command 
\end_layout

\begin_layout Verse
Then the server will send an InvalidCommandError
\end_layout

\begin_layout Standard
The Client is not allowed to send the ready command twice in a row.
 He is not allowed to play against himself.
 The server needs to make sure this does not happen by sending an InvalidCommand
Error.
\end_layout

\begin_layout Paragraph
Scenario: Client sends join in lobby state 
\end_layout

\begin_layout Verse
Given a empty server 
\end_layout

\begin_layout Verse
When I join the server with name Wouter 
\end_layout

\begin_layout Verse
Then the server will accept me 
\end_layout

\begin_layout Verse
And I join the server with name Frits 
\end_layout

\begin_layout Verse
Then the server will send an InvalidCommandError
\end_layout

\begin_layout Standard
The Client has already joined the server and is not allowed to enter the
 server once more (even though the name of the Client is different).
 The server should send the InvalidCommandError and refuse the Client to
 join again.
\end_layout

\begin_layout Subsection
Testing disconnects from the server
\end_layout

\begin_layout Standard
In this test, the server is tested for handling disconnects from clients.
 The only scenario that needed to be tested is shown below.
\end_layout

\begin_layout Paragraph
Scenario: Client disconnects while in a game 
\end_layout

\begin_layout Verse
Given the client is in a game with another player 
\end_layout

\begin_layout Verse
When I disconnect from the server 
\end_layout

\begin_layout Verse
Then the server sends a PlayerDisconnectError to the other player 
\end_layout

\begin_layout Verse
And the server sends an end_game command
\end_layout

\begin_layout Standard
If a Client disconnects in a game, the server needs to stop the game and
 send the PlayerDisconnectError to the other player to let him know what
 happened and why the game stopped.
\end_layout

\begin_layout Subsection
Testing joins to the server
\end_layout

\begin_layout Standard
This test is about the way the server handles the join command from the
 clients.
 The scenarios and results are shown below.
\end_layout

\begin_layout Paragraph
Scenario: Name not yet exists in server 
\end_layout

\begin_layout Verse
Given a empty server 
\end_layout

\begin_layout Verse
When I join the server with name Wouter 
\end_layout

\begin_layout Verse
Then the server will accept me
\end_layout

\begin_layout Standard
If the Client enters a server with a non existing name, the server should
 allow the Client to join.
 
\end_layout

\begin_layout Paragraph
Scenario: Name exists in server 
\end_layout

\begin_layout Verse
Given a server with one connected client 
\end_layout

\begin_layout Verse
When I join the server with the same name 
\end_layout

\begin_layout Verse
Then the server will send an InvalidUserName error
\end_layout

\begin_layout Standard
Whenever the Client tries to join the server with a name that already exists
 in the server, the server should not allow the Client to join.
 An InvalidUsernameError should be send by the server.
\end_layout

\begin_layout Paragraph
Scenario: Name is not valid according to protocol 
\end_layout

\begin_layout Verse
Given a empty server 
\end_layout

\begin_layout Verse
When I join the server with name Wouter@ 
\end_layout

\begin_layout Verse
Then the server will send an InvalidParameterError with Wouter@
\end_layout

\begin_layout Standard
If the Client wants to join the server, but the name is not according to
 the protocol, the Client is not allowed to join the server.
 The server will send an InvalidParameterError with the 'wrong' name.
\end_layout

\begin_layout Subsection
Testing starting a game
\end_layout

\begin_layout Standard
This test is about starting a game.
 The server needs to have at least two players who sent the ready command
 to start a game.
 The scenarios and results of this test are shown below.
\end_layout

\begin_layout Paragraph
Scenario: The client sends a 'ready' command 
\end_layout

\begin_layout Verse
Given a server with one other ready player 
\end_layout

\begin_layout Verse
When I join the server with name Wouter 
\end_layout

\begin_layout Verse
Then the server will accept me 
\end_layout

\begin_layout Verse
And I send the ready command 
\end_layout

\begin_layout Verse
Then the server starts a game with the other ready player and me
\end_layout

\begin_layout Standard
The server should start a game whenever there are two players ready.
 
\end_layout

\begin_layout Paragraph
Scenario: The client sends a 'ready' command 
\end_layout

\begin_layout Verse
Given a server with no other ready players 
\end_layout

\begin_layout Verse
When I send the ready command 
\end_layout

\begin_layout Verse
Then the server waits with putting me in a game until another player is
 ready as well
\end_layout

\begin_layout Standard
If the Client sends the ready command, but there is not another ready player,
 the server should wait with starting a game until there is another player
 ready.
\end_layout

\begin_layout Subsection
Testing making a move
\end_layout

\begin_layout Standard
This test is about making moves: when and where the Client is allowed to
 make a specific move.
 The different scenarios and results are shown below.
\end_layout

\begin_layout Paragraph
Scenario: Client is in a game and it's his turn 
\end_layout

\begin_layout Verse
Given a game with two players and it's the clients turn 
\end_layout

\begin_layout Verse
When I send a 'do move 4' command 
\end_layout

\begin_layout Verse
Then the server sends the move 4 to both the players 
\end_layout

\begin_layout Verse
And the server sends a requestmove to the other player
\end_layout

\begin_layout Standard
Whenever a Client is in a game and it's his turn, the server should allow
 him to make a valid move.
 The server needs to receive the move and send it to both the players.
 After this it will be the other players turn, so the server should send
 a requestmove to the other player.
\end_layout

\begin_layout Paragraph
Scenario: Client is in a game, but it's not his turn
\end_layout

\begin_layout Verse
Given a game with two players and it's not the clients turn 
\end_layout

\begin_layout Verse
When I send a 'do move 4' command 
\end_layout

\begin_layout Verse
Then the server will send an InvalidMoveError 
\end_layout

\begin_layout Standard
If a Client is in a game, but it not his turn, the server should not allow
 him to make a move.
 An InvalidMoveError should be send whenever the Client tries to make the
 move while it is not his turn.
\end_layout

\begin_layout Paragraph
Scenario: Client is not in a game 
\end_layout

\begin_layout Verse
Given a client that is in a server, but not yet in a game 
\end_layout

\begin_layout Verse
When I send a 'do move 4' command 
\end_layout

\begin_layout Verse
Then the server will send an InvalidCommandError
\end_layout

\begin_layout Standard
If the Client is not in a game, he is not allowed to make a move.
 This would be a invalid command.
 The server should send an InvalidCommandError and not allow the Client
 to do this command.
\end_layout

\begin_layout Paragraph
Scenario: Client is in a game, but sends a invalid move 
\end_layout

\begin_layout Verse
Given a game with two players and it's the clients turn 
\end_layout

\begin_layout Verse
When I send a 'do move 7' command 
\end_layout

\begin_layout Verse
Then the server will send an InvalidParameterError with 7
\end_layout

\begin_layout Standard
Whenever a Client is in a game and it is his turn, but he tries to make
 a invalid move, the server should not allow this to happen.
 The server should send an InvalidParameterError with the attempted move.
\end_layout

\begin_layout Chapter
Metrics report
\end_layout

\begin_layout Section
Method Lines of Code
\end_layout

\begin_layout Standard
We looked at the value of the 'Method Lines Of Code' by altering spaces,
 tabs and new lines.
 We looked at the value of the Methods Lines Of Code when adding and removing
 spaces and tabs.
 If spaces and or tabs are added, the value does not change.
 This is the same for deleting spaces and tabs: the Method Lines Of Code
 value does not change at all.
 Whenever new lines are added or lines are removed by placing the text on
 the previous line, the value changes.
 The text is still divided by the 
\begin_inset Quotes eld
\end_inset

 ; ", but the value has been changed.
 Thus, the difference in value is only changed by adding and removing (new)
 lines of text.
\end_layout

\begin_layout Section
McCabe cyclomatic complexity
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Section
Weight methods per class
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Section
Lack of Cohesion in Methods
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Reflection on planning
\end_layout

\begin_layout Section
Planning influenced by experiences
\end_layout

\begin_layout Standard
For every single project we have done this year, we were both part of the
 same project group.
 This way it was really easy to make a planning, even though we changed
 our tactics a little bit.
 We did more planning than we were used to do for the other projects.
 
\end_layout

\begin_layout Standard
For this project we sat down and started by looking at the TODO list.
 What are the requirements for this project.
\end_layout

\begin_layout Section
Actual progress
\end_layout

\begin_layout Standard
The planning corresponded pretty well to our actual progress.
 At the beginning of the project we divided the project in a couple of different
 topics.
 We made a tight schedule with a lot of extra space at the end of the project
 weeks, in case we needed more time to work on some of these topics of the
 project.
\end_layout

\begin_layout Standard
The first few days we were exactly on schedule, we even had some time off
 because we were too fast.
 We underestimated the amount of work on the documentation and making the
 report a little bit.
 But because we had three days left with no work we had more than enough
 time to make sure the report was done properly as well.
\end_layout

\begin_layout Standard
We think we did not spend a lot of time doing nothing while we should have
 been working on the project (according to the planning).
 We took our breaks, but after the breaks we went on an on working, typing,
 fixing bugs, thinking of smart ways to program the Connect Four game and
 the tests.
\end_layout

\begin_layout Standard
While we were busy programming we spend some time every single morning to
 review what had been done and what we still needed to do.
 
\end_layout

\begin_layout Section
Countermeasures
\end_layout

\begin_layout Standard
We took those countermeasures even before we started the project: we planned
 3 free days (excluding the weekend, so including the weekend that would
 be 5 days) if we would not be ready according to our planning.
 This way it was really easy to change our actual planning and make sure
 everything was done in time.
\end_layout

\begin_layout Standard
Because we took our time and reviewed what we still needed to do every single
 morning, we were able to change the planning a little bit.
 
\end_layout

\begin_layout Section
What did we learn
\end_layout

\begin_layout Standard
From this experience we learned that it was really nice having some free
 time at the end of the project, right before the deadline.
 If you try to do everything at the last possible moment you will hit your
 head.
 This will give a lot of stress and we sure did not have any stress at all.
 We worked hard and that has been rewarded: we finished everything in time
 and we were even able to do some extra's (GUI, extra tests, etc.).
\end_layout

\begin_layout Standard
A planning is not a final work of art.
 You are still able to change it later on, so you will be able to make the
 most out of your time.
\end_layout

\begin_layout Section
Next year's student assistant
\end_layout

\begin_layout Standard
If we would be student assistants next year we would tell the first years
 the next things:
\end_layout

\begin_layout Paragraph
Do's:
\end_layout

\begin_layout Itemize
Make sure you plan some free time at the end of the project, right before
 the deadline.
 If you are not finished yet, at least you will have some time to make sure
 it will be completely done before you hand your work in.
\end_layout

\begin_layout Itemize
Make sure you plan (and actually have) a couple of meetings during the project:
 you will be able to see what still needs to be done and what is already
 finished.
 This way you will be able to change your planning during the course according
 to what would be best for you and your group to make sure you're done in
 time.
\end_layout

\begin_layout Paragraph
Dont's:
\end_layout

\begin_layout Itemize
Do not underestimate the amount of time needed for certain parts of the
 project.
 For example, the writing of the report will take a lot of time as well
 as the making of the tests for the project.
\end_layout

\begin_layout Itemize
Do not divide the work between the two of you in such a way that the other
 does not know what you are doing or what you have done to make things work
 in the project classes.
\end_layout

\begin_layout Chapter
\start_of_appendix
\begin_inset CommandInset label
LatexCommand label
name "chap:BinaryBoard"

\end_inset

BinaryBoard
\end_layout

\begin_layout Paragraph
Introduction
\end_layout

\begin_layout Standard
For performance reasons we have chosen to implement the board in 64-bit
 integers in stead of a one or two dimensional array.
 For normal operation this would not be so important, however we have also
 developed an AI that tries a lot of moves.
 Good performance is therefore paramount.
 We have seen an 30 fold performance increase compared to a two dimensional
 array board implementation.
 This implementation is much more efficient for the computer, it is however
 not particularly programmer efficient.
 To increase understanding of our implementation for the maintainer and
 therefore maintainability of our code we include a description of our implement
ation.
 This is an informal description of the implementation, no mathematical
 proofs are given for the correctness of this implementation.
 The board is however thoroughly tested to ensure it performs according
 to specifications.
\end_layout

\begin_layout Section
State
\end_layout

\begin_layout Subsection
Auxiliary fields
\end_layout

\begin_layout Standard
These fields get used multiple times in the calculations of this implementation.
 The values of these fields are dependent on the amount of columns and row
 of the given board.
 The values here below correspond to a board with seven columns and six
 rows.
\end_layout

\begin_layout Standard
\begin_inset Formula $H1=111_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $H2=1000_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $SIZE=101010_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $SIZE1=110001_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ALL1=1111111111111111111111111111111111111111111111111_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $COL1=1111111_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $BOTTOM=1000000100000010000001000000100000010000001_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $TOP=1000000100000010000001000000100000010000001000000_{2}$
\end_inset


\end_layout

\begin_layout Subsection
Board position numbering
\end_layout

\begin_layout Standard
The following board position numbering will be used:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="7">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
26
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
33
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
39
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
46
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
38
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
45
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
37
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
44
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
36
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
43
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
35
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
42
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
When a player has a piece on a given index the 'bit' corresponding to the
 index according to the above numbering is placed in the color array element
 of that player.
\end_layout

\begin_layout Subsection
Main fields
\end_layout

\begin_layout Standard
The model uses four variables to keep the board state:
\end_layout

\begin_layout Itemize
int array moves: keeps an list of all moves performed during the game
\end_layout

\begin_layout Itemize
int nplies: number of moves since the start of the games, also used to determine
 current player
\end_layout

\begin_layout Itemize
byte array height: for each column in the board keeps the index of the lowest
 free spot
\end_layout

\begin_layout Itemize
long array color: for each of the two players a long keeping the current
 piece configuration
\end_layout

\begin_layout Section
Making moves
\end_layout

\begin_layout Subsection
Bust a move
\end_layout

\begin_layout Standard
The following procedure is used to save the making of an move:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
color[player]\: XOR\,1\ll height[col]
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
This says as much as set an one at the bit index of the board position.
 The height array is used to determine at which precise index the bit will
 be set, this is needed because a move consists of a column.
 After saving the move in the color array the height of the column gets
 incremented by one.
\end_layout

\begin_layout Subsection
Detecting column overflow
\end_layout

\begin_layout Standard
The 'AND' operator is used on the long for the player and TOP.
 As you may have noticed or read, there is a gap of one between the index
 of the highest row of a column and the index of the lowest row of the following
 column.
 This is no accident.
 Because of this gap it is very easy to check the validity of a move.
 On a valid board operation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:overflow"

\end_inset

 will always return zero because a valid board never has a bit set on one
 of the reserved indexes.
 The field top however has all the bits set on the reserved indexes.
 When the AND operator gets used with these two values it returns 0 for
 a valid board and not zero for an invalid board.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
color[player]\: AND\: TOP\label{eq:overflow}
\end{equation}

\end_inset


\end_layout

\begin_layout Section
Determining winner
\end_layout

\begin_layout Standard
As can be seen in the numbering of board positions, there is a gap of one
 between the index of the top spot of a column and the index of the lowest
 spot of the following column.
 The bits with these indexes have been set to 1 in TOP.
 For a valid board this operation always return 0.
 If however one of the columns overflowed, this operation returns 1.
 Therefore it is simply tested if this operation returns 0;
\end_layout

\begin_layout Subsection
Detecting horizontal rows
\end_layout

\begin_layout Standard
Operation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:horiz-1"

\end_inset

 shows how value y gets determined.
 We take 
\begin_inset Formula $ROW=1000000100000010000001_{2}$
\end_inset

 , this value represents a board for a player who has a horizontal row on
 indexes 0,7,14,21.
 First a logical right shift of 7 is performed (amount of rows + 1 because
 of the overflow detection) .
 This results in 100000010000001, if one ANDS this with ROW you get the
 same result as the first operation.
 So we have 
\begin_inset Formula $y=100000010000001$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y=color[player]\, AND\,(color[player]\,\gg H1)\label{eq:horiz-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Then it's time for the next step.
 y get's right shifted by 14 which results in 1.
 This result gets then ANDed with y which results again in 1.
 To test if a particular user has a horizontal row, the system checks if
 operation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:horiz-2"

\end_inset

 returns a non zero result.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y\, AND\,(y\gg(2*H1))\label{eq:horiz-2}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsection
Detecting vertical rows
\end_layout

\begin_layout Subsection
Detecting left down right up diagonals
\end_layout

\begin_layout Subsection
Detecting left up right down diagonals
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "fourcharm"
options "IEEEtran"

\end_inset


\end_layout

\end_body
\end_document
